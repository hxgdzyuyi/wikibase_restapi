# NOTE: This file is auto generated by OpenAPI Generator 7.13.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule WikibaseRESTAPI.Api.Statements do
  @moduledoc """
  API calls for all endpoints tagged `Statements`.
  """

  alias WikibaseRESTAPI.Connection
  import WikibaseRESTAPI.RequestBuilder

  @doc """
  Add a new Statement to an Item

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `item_id` (String.t): The ID of the required Item
  - `add_item_statement_request` (AddItemStatementRequest): Payload containing a Wikibase Statement object and edit metadata
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers

  ### Returns

  - `{:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_item_statement(Tesla.Env.client, String.t, WikibaseRESTAPI.Model.AddItemStatementRequest.t, keyword()) :: {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:ok, nil} | {:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t} | {:error, Tesla.Env.t}
  def add_item_statement(connection, item_id, add_item_statement_request, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"If-Unmodified-Since" => :headers,
      :"If-None-Match" => :headers
    }

    request =
      %{}
      |> method(:post)
      |> url("/v1/entities/items/#{item_id}/statements")
      |> add_param(:body, :body, add_item_statement_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, WikibaseRESTAPI.Model.AddItemStatement201Response},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {403, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {409, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {429, WikibaseRESTAPI.Model.AddItem400Response},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Add a new Statement to a Property

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `property_id` (String.t): The ID of the required Property
  - `add_item_statement_request` (AddItemStatementRequest): Payload containing a Wikibase Statement object and edit metadata
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers

  ### Returns

  - `{:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_property_statement(Tesla.Env.client, String.t, WikibaseRESTAPI.Model.AddItemStatementRequest.t, keyword()) :: {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:ok, nil} | {:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t} | {:error, Tesla.Env.t}
  def add_property_statement(connection, property_id, add_item_statement_request, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"If-Unmodified-Since" => :headers,
      :"If-None-Match" => :headers
    }

    request =
      %{}
      |> method(:post)
      |> url("/v1/entities/properties/#{property_id}/statements")
      |> add_param(:body, :body, add_item_statement_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, WikibaseRESTAPI.Model.AddItemStatement201Response},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {403, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {429, WikibaseRESTAPI.Model.AddItem400Response},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Delete a single Statement from an Item
  This endpoint is also accessible through `/statements/{statement_id}`

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `item_id` (String.t): The ID of the required Item
  - `statement_id` (String.t): The ID of a Statement on an Item
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date
    - `:body` (DeleteSitelinkRequest): Edit payload containing edit metadata

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_item_statement(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def delete_item_statement(connection, item_id, statement_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"If-None-Match" => :headers,
      :"If-Unmodified-Since" => :headers,
      :body => :body
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v1/entities/items/#{item_id}/statements/#{statement_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {403, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {429, WikibaseRESTAPI.Model.AddItem400Response},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Delete a single Statement from a Property
  This endpoint is also accessible through `/statements/{statement_id}`.

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `property_id` (String.t): The ID of the required Property
  - `statement_id` (String.t): The ID of a Statement on a Property
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date
    - `:body` (DeleteSitelinkRequest): Edit payload containing edit metadata

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_property_statement(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def delete_property_statement(connection, property_id, statement_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"If-None-Match" => :headers,
      :"If-Unmodified-Since" => :headers,
      :body => :body
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v1/entities/properties/#{property_id}/statements/#{statement_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {403, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {429, WikibaseRESTAPI.Model.AddItem400Response},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Delete a single Statement
  This endpoint is also accessible through `/entities/items/{item_id}/statements/{statement_id}` and `/entities/properties/{property_id}/statements/{statement_id}`

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `statement_id` (String.t): The ID of a Statement
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date
    - `:body` (DeleteSitelinkRequest): Edit payload containing edit metadata

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_statement(Tesla.Env.client, String.t, keyword()) :: {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def delete_statement(connection, statement_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"If-None-Match" => :headers,
      :"If-Unmodified-Since" => :headers,
      :body => :body
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v1/statements/#{statement_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {403, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {429, WikibaseRESTAPI.Model.AddItem400Response},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Retrieve a single Statement from an Item
  This endpoint is also accessible through `/statements/{statement_id}`

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `item_id` (String.t): The ID of the required Item
  - `statement_id` (String.t): The ID of a Statement on an Item
  - `opts` (keyword): Optional parameters
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers
    - `:"If-Modified-Since"` (String.t): Conditionally perform the request only if the resource has been modified after the specified date
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date
    - `:Authorization` (String.t): Make authenticated request using a provided bearer token

  ### Returns

  - `{:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_item_statement(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t} | {:error, Tesla.Env.t}
  def get_item_statement(connection, item_id, statement_id, opts \\ []) do
    optional_params = %{
      :"If-None-Match" => :headers,
      :"If-Modified-Since" => :headers,
      :"If-Match" => :headers,
      :"If-Unmodified-Since" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/entities/items/#{item_id}/statements/#{statement_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, WikibaseRESTAPI.Model.AddItemStatement201Response},
      {304, false},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Retrieve Statements from an Item

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `item_id` (String.t): The ID of the required Item
  - `opts` (keyword): Optional parameters
    - `:property` (String.t): Single Property ID to filter Statements by.
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers
    - `:"If-Modified-Since"` (String.t): Conditionally perform the request only if the resource has been modified after the specified date
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date
    - `:Authorization` (String.t): Make authenticated request using a provided bearer token

  ### Returns

  - `{:ok, %{}}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_item_statements(Tesla.Env.client, String.t, keyword()) :: {:ok, map()} | {:ok, nil} | {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:error, Tesla.Env.t}
  def get_item_statements(connection, item_id, opts \\ []) do
    optional_params = %{
      :property => :query,
      :"If-None-Match" => :headers,
      :"If-Modified-Since" => :headers,
      :"If-Match" => :headers,
      :"If-Unmodified-Since" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/entities/items/#{item_id}/statements")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {304, false},
      {308, false},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Retrieve a single Statement from a Property
  This endpoint is also accessible through `/statements/{statement_id}`

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `property_id` (String.t): The ID of the required Property
  - `statement_id` (String.t): The ID of a Statement on a Property
  - `opts` (keyword): Optional parameters
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers
    - `:"If-Modified-Since"` (String.t): Conditionally perform the request only if the resource has been modified after the specified date
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date
    - `:Authorization` (String.t): Make authenticated request using a provided bearer token

  ### Returns

  - `{:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_property_statement(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t} | {:error, Tesla.Env.t}
  def get_property_statement(connection, property_id, statement_id, opts \\ []) do
    optional_params = %{
      :"If-None-Match" => :headers,
      :"If-Modified-Since" => :headers,
      :"If-Match" => :headers,
      :"If-Unmodified-Since" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/entities/properties/#{property_id}/statements/#{statement_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, WikibaseRESTAPI.Model.AddItemStatement201Response},
      {304, false},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Retrieve Statements from a Property

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `property_id` (String.t): The ID of the required Property
  - `opts` (keyword): Optional parameters
    - `:property` (String.t): Single Property ID to filter Statements by.
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers
    - `:"If-Modified-Since"` (String.t): Conditionally perform the request only if the resource has been modified after the specified date
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date
    - `:Authorization` (String.t): Make authenticated request using a provided bearer token

  ### Returns

  - `{:ok, %{}}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_property_statements(Tesla.Env.client, String.t, keyword()) :: {:ok, map()} | {:ok, nil} | {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:error, Tesla.Env.t}
  def get_property_statements(connection, property_id, opts \\ []) do
    optional_params = %{
      :property => :query,
      :"If-None-Match" => :headers,
      :"If-Modified-Since" => :headers,
      :"If-Match" => :headers,
      :"If-Unmodified-Since" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/entities/properties/#{property_id}/statements")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {304, false},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Retrieve a single Statement
  This endpoint is also accessible through `/entities/items/{item_id}/statements/{statement_id}` and `/entities/properties/{property_id}/statements/{statement_id}`

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `statement_id` (String.t): The ID of a Statement
  - `opts` (keyword): Optional parameters
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers
    - `:"If-Modified-Since"` (String.t): Conditionally perform the request only if the resource has been modified after the specified date
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date
    - `:Authorization` (String.t): Make authenticated request using a provided bearer token

  ### Returns

  - `{:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_statement(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t} | {:error, Tesla.Env.t}
  def get_statement(connection, statement_id, opts \\ []) do
    optional_params = %{
      :"If-None-Match" => :headers,
      :"If-Modified-Since" => :headers,
      :"If-Match" => :headers,
      :"If-Unmodified-Since" => :headers,
      :Authorization => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/statements/#{statement_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, WikibaseRESTAPI.Model.AddItemStatement201Response},
      {304, false},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Change elements of a single Statement of an Item
  This endpoint is also accessible through `/statements/{statement_id}`.

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `item_id` (String.t): The ID of the required Item
  - `statement_id` (String.t): The ID of a Statement on an Item
  - `patch_item_request` (PatchItemRequest): Payload containing a JSON Patch document to be applied to the Statement and edit metadata
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date

  ### Returns

  - `{:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec patch_item_statement(Tesla.Env.client, String.t, String.t, WikibaseRESTAPI.Model.PatchItemRequest.t, keyword()) :: {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:ok, nil} | {:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t} | {:error, Tesla.Env.t}
  def patch_item_statement(connection, item_id, statement_id, patch_item_request, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"If-None-Match" => :headers,
      :"If-Unmodified-Since" => :headers
    }

    request =
      %{}
      |> method(:patch)
      |> url("/v1/entities/items/#{item_id}/statements/#{statement_id}")
      |> add_param(:body, :body, patch_item_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, WikibaseRESTAPI.Model.AddItemStatement201Response},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {403, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {409, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {422, WikibaseRESTAPI.Model.AddItem400Response},
      {429, WikibaseRESTAPI.Model.AddItem400Response},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Change elements of a single Statement of a Property
  This endpoint is also accessible through `/statements/{statement_id}`.

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `property_id` (String.t): The ID of the required Property
  - `statement_id` (String.t): The ID of a Statement on a Property
  - `patch_item_request` (PatchItemRequest): Payload containing a JSON Patch document to be applied to the Statement and edit metadata
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date

  ### Returns

  - `{:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec patch_property_statement(Tesla.Env.client, String.t, String.t, WikibaseRESTAPI.Model.PatchItemRequest.t, keyword()) :: {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:ok, nil} | {:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t} | {:error, Tesla.Env.t}
  def patch_property_statement(connection, property_id, statement_id, patch_item_request, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"If-None-Match" => :headers,
      :"If-Unmodified-Since" => :headers
    }

    request =
      %{}
      |> method(:patch)
      |> url("/v1/entities/properties/#{property_id}/statements/#{statement_id}")
      |> add_param(:body, :body, patch_item_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, WikibaseRESTAPI.Model.AddItemStatement201Response},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {403, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {409, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {422, WikibaseRESTAPI.Model.AddItem400Response},
      {429, WikibaseRESTAPI.Model.AddItem400Response},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Change elements of a single Statement
  This endpoint is also accessible through `/entities/items/{item_id}/statements/{statement_id}` and `/entities/properties/{property_id}/statements/{statement_id}`

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `statement_id` (String.t): The ID of a Statement
  - `patch_item_request` (PatchItemRequest): Payload containing a JSON Patch document to be applied to the Statement and edit metadata
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date

  ### Returns

  - `{:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec patch_statement(Tesla.Env.client, String.t, WikibaseRESTAPI.Model.PatchItemRequest.t, keyword()) :: {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:ok, nil} | {:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t} | {:error, Tesla.Env.t}
  def patch_statement(connection, statement_id, patch_item_request, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"If-None-Match" => :headers,
      :"If-Unmodified-Since" => :headers
    }

    request =
      %{}
      |> method(:patch)
      |> url("/v1/statements/#{statement_id}")
      |> add_param(:body, :body, patch_item_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, WikibaseRESTAPI.Model.AddItemStatement201Response},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {403, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {409, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {422, WikibaseRESTAPI.Model.AddItem400Response},
      {429, WikibaseRESTAPI.Model.AddItem400Response},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Replace a single Statement of an Item
  This endpoint is also accessible through `/statements/{statement_id}`

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `item_id` (String.t): The ID of the required Item
  - `statement_id` (String.t): The ID of a Statement on an Item
  - `add_item_statement_request` (AddItemStatementRequest): Payload containing a Wikibase Statement object and edit metadata
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date

  ### Returns

  - `{:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec replace_item_statement(Tesla.Env.client, String.t, String.t, WikibaseRESTAPI.Model.AddItemStatementRequest.t, keyword()) :: {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:ok, nil} | {:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t} | {:error, Tesla.Env.t}
  def replace_item_statement(connection, item_id, statement_id, add_item_statement_request, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"If-None-Match" => :headers,
      :"If-Unmodified-Since" => :headers
    }

    request =
      %{}
      |> method(:put)
      |> url("/v1/entities/items/#{item_id}/statements/#{statement_id}")
      |> add_param(:body, :body, add_item_statement_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, WikibaseRESTAPI.Model.AddItemStatement201Response},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {403, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {429, WikibaseRESTAPI.Model.AddItem400Response},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Replace a single Statement of a Property
  This endpoint is also accessible through `/statements/{statement_id}`

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `property_id` (String.t): The ID of the required Property
  - `statement_id` (String.t): The ID of a Statement on a Property
  - `add_item_statement_request` (AddItemStatementRequest): Payload containing a Wikibase Statement object and edit metadata
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date

  ### Returns

  - `{:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec replace_property_statement(Tesla.Env.client, String.t, String.t, WikibaseRESTAPI.Model.AddItemStatementRequest.t, keyword()) :: {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:ok, nil} | {:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t} | {:error, Tesla.Env.t}
  def replace_property_statement(connection, property_id, statement_id, add_item_statement_request, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"If-None-Match" => :headers,
      :"If-Unmodified-Since" => :headers
    }

    request =
      %{}
      |> method(:put)
      |> url("/v1/entities/properties/#{property_id}/statements/#{statement_id}")
      |> add_param(:body, :body, add_item_statement_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, WikibaseRESTAPI.Model.AddItemStatement201Response},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {403, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {429, WikibaseRESTAPI.Model.AddItem400Response},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end

  @doc """
  Replace a single Statement
  This endpoint is also accessible through `/entities/items/{item_id}/statements/{statement_id}` and `/entities/properties/{property_id}/statements/{statement_id}`

  ### Parameters

  - `connection` (WikibaseRESTAPI.Connection): Connection to server
  - `statement_id` (String.t): The ID of a Statement
  - `add_item_statement_request` (AddItemStatementRequest): Payload containing a Wikibase Statement object and edit metadata
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` ([String.t]): Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers
    - `:"If-None-Match"` ([String.t]): Conditionally perform the request only if the resource has been modified since the specified entity revision numbers
    - `:"If-Unmodified-Since"` (String.t): Conditionally perform the request only if the resource has not been modified after the specified date

  ### Returns

  - `{:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec replace_statement(Tesla.Env.client, String.t, WikibaseRESTAPI.Model.AddItemStatementRequest.t, keyword()) :: {:ok, WikibaseRESTAPI.Model.AddItem400Response.t} | {:ok, nil} | {:ok, WikibaseRESTAPI.Model.AddItemStatement201Response.t} | {:error, Tesla.Env.t}
  def replace_statement(connection, statement_id, add_item_statement_request, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"If-None-Match" => :headers,
      :"If-Unmodified-Since" => :headers
    }

    request =
      %{}
      |> method(:put)
      |> url("/v1/statements/#{statement_id}")
      |> add_param(:body, :body, add_item_statement_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, WikibaseRESTAPI.Model.AddItemStatement201Response},
      {400, WikibaseRESTAPI.Model.AddItem400Response},
      {403, WikibaseRESTAPI.Model.AddItem400Response},
      {404, WikibaseRESTAPI.Model.AddItem400Response},
      {412, false},
      {429, WikibaseRESTAPI.Model.AddItem400Response},
      {500, WikibaseRESTAPI.Model.AddItem400Response}
    ])
  end
end
